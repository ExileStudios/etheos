name: 0.7.1.$(rev:rrrr)

trigger:
  branches:
    include:
    - master

schedules:
- cron: 0 0 * * 0 # 0 - hour | 0 - minute | * - any day | * - any month | 0 - sunday
  displayName: 'Scheduled Build'
  branches:
    include:
      - master
  always: true

variables:
- group: deploy-secrets

stages:
- stage: build_test
  displayName: 'Build + Test'
  jobs:
  - job: build_linux
    displayName: 'Build - Release - Ubuntu (MariaDB + SQL Server + Sqlite)'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      lfs: true
    - script: sudo ./install-deps.sh
      displayName: 'Install build dependencies'
      workingDirectory: 'scripts'
    - script: ./build-linux.sh -c --sqlserver ON --mariadb ON --sqlite ON
      displayName: 'Build'
    - script: ./eoserv_test
      displayName: 'Test'
      workingDirectory: $(Build.SourcesDirectory)/install/test
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'install'
        ArtifactName: 'linux'
        publishLocation: 'Container'

  - job: build_windows
    displayName: 'Build - Release - Windows (MariaDB + SQL Server + Sqlite)'
    pool:
      vmImage: 'windows-latest'
    steps:
    - checkout: self
      lfs: true
    - task: PowerShell@2
      displayName: 'Install build dependencies'
      inputs:
        filePath: '.\scripts\install-deps.ps1'
        arguments: '-SkipCMake' # CMake is installed on the windows-latest image
    - task: PowerShell@2
      displayName: 'Build'
      inputs:
        filePath: '.\build-windows.ps1'
        arguments: '-Clean -SqlServer ON -MariaDB ON -Sqlite ON'
    - script: .\eoserv_test.exe
      displayName: 'Test'
      workingDirectory: $(Build.SourcesDirectory)\install\test
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'install'
        ArtifactName: 'windows'
        publishLocation: 'Container'

  - job: build_docker
    displayName: 'Docker build'
    dependsOn: build_linux
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      lfs: true
    - task: DownloadBuildArtifacts@0
      inputs:
        downloadType: 'single'
        artifactName: 'linux'
        downloadPath: '$(Build.SourcesDirectory)'
    - script: mv linux install
      displayName: 'Rename linux dir -> install'
    - script: chmod +x install/etheos
      displayName: 'Make etheos binary executable'
    - task: Docker@2
      inputs:
        command: login
        containerRegistry: etheos
    - task: Docker@2
      condition: not(or(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.Reason'], 'Schedule')))
      displayName: 'Build/push etheos image'
      inputs:
        command: buildAndPush
        repository: etheos/dev
        tags: |
          $(Build.BuildNumber)
          latest

  - job: tag_and_publish
    displayName: 'Tag sources and publish build number'
    dependsOn: [ 'build_windows', 'build_linux', 'build_docker' ]
    condition: succeeded()
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      lfs: true
      persistCredentials: true
    - script: |
        git tag build/$(Build.BuildNumber)
        git push origin build/$(Build.BuildNumber)
      workingDirectory: $(Build.SourcesDirectory)
      displayName: 'Tag sources'
    - script: echo $(Build.BuildNumber) > $(Build.ArtifactStagingDirectory)/BUILD_NUMBER
      displayName: 'Store build number in file'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish build number as artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'build_number'
        publishLocation: 'Container'

  - job: deploy
    displayName: 'Deploy to dev environment - PR/Manual Builds'
    dependsOn: [ 'build_windows', 'build_linux', 'build_docker' ]
    condition: and(succeeded(), or(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.Reason'], 'Manual')))
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      lfs: true
    - script: $(Build.SourcesDirectory)/deploy/deploy.sh CREATE -u 55d02cce-765c-4364-a5a6-1328ba987d83 -p $(deployAppSecret) -e dev
      displayName: 'Deploy to dev environment'
